buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'groovy'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'nebula.ospackage'

import org.rundeck.gradle.PackageTask

def pPrefix = findProperty('packagePrefix')?: ""
def pOrg = findProperty('packageOrg')?: "rundeck"
def pType = findProperty('packageType')
def pBundle = findProperty('packageBundle')?: "rundeck"
def pRelease = findProperty('packageRelease')?: "1"
def pInclude = findProperty('packageInclude')?: ".*"


def artifacts = fileTree('artifacts').matching {
    include {
        it.file.name ==~ pInclude
    }
}

def fileVersionInfo(file) {
    def m = file.name =~ /(?<flavor>rundeck(pro)?)-(?<bundle>[a-zA-Z]+)?-?(?<version>\d.+?)-((?<tag>[a-zA-Z][a-zA-Z0-9]+)-?)?(?<date>\d.+?)?\.war$/
    if(! m.matches()) {
        throw new GradleException("Unable to parse version [${version}]!".toString())
    }

    def info = [
        flavor: m.group('flavor'),
        num: m.group('version'),
        tag: m.group('tag'),
        date: m.group('date'),
        bundle: m.group('bundle'),
    ]

    info.package = info.bundle != null ? "$info.flavor-$info.bundle" : info.flavor

    def fullVersion = info.num
    fullVersion += info.date != null ? ".$info.date" : ""
    fullVersion += info.tag != null ? "~$info.tag" : ""

    info.version = fullVersion
    return info
}

def vInfo = fileVersionInfo(artifacts.getFiles()[0])
println vInfo

task packageArtifacts{}
def firstFile = artifacts.getFiles().each { file ->
    def fileVersion = fileVersionInfo(file)

    def pTask = task "packageRundeck-$file.name"(type: PackageTask) {
        artifact = file
        packageVersion = fileVersion.version
        packageRelease = pRelease
        packageName = fileVersion.package
        packageDescription = 'Rundeck!!!!'
        libDir = "$projectDir/lib"
    }

    packageArtifacts.dependsOn pTask
}

/**
 * Bintray upload stuffs follows. Unfortunately due to the plugin design, only one per project will work.
 * Gradle must be called for each package type(deb, rpm) for each bundle type.
*/

def repoPrefix = pPrefix
if (vInfo.tag == 'SNAPSHOT') {
    repoPrefix = 'dev-'
} else if (vInfo.tag != null ) {
    repoPrefix = 'test-'
}

bintray {
    user = findProperty("bintrayUser")
    key = findProperty("bintrayApiKey")
    publish = true
    override = vInfo.tag == 'SNAPSHOT' ? true : false
    dryRun = (findProperty('dryRun') ?: 'true').toBoolean()

    filesSpec {
        from "$buildDir/distributions"
        include "*$pBundle*.$pType"
        into "."
    }

    pkg {
        repo = "${repoPrefix}${pType}"
        name = pBundle
        userOrg = pOrg

        version {
            name = vInfo.version
        }

        debian {
            distribution = 'stable'
            component = 'main'
            architecture = 'all'
        }
    }
}